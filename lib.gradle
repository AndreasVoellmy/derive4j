
import org.apache.tools.ant.taskdefs.condition.Os

String findCommand(String dir, String command) {
    def extension = Os.isFamily(Os.FAMILY_WINDOWS) ? ".exe" : ""
    def cmd = "$dir/$command$extension"
    if (! new File(cmd).exists()) {
        throw new Exception("Command $command not found in dir $dir")
    }
    cmd
}

Boolean doSigning(String signingAllowed, Boolean doModule) {
    signingAllowed.trim() == "true" && doModule
}

void performSigning(String signingAllowed, Boolean doModule) {
    signing {
        required { doSigning(signingAllowed, doModule) }
        sign configurations.archives
    }
}

void configureUpload(String licenseName, String signingEnabled, Boolean signModule) {
    install {
        repositories.mavenInstaller {
            pom {
                groupId = project.group
                project {
                    name pomProjectName
                    packaging 'jar'
                    description projectDescription
                    url projectUrl
                    organization {
                        name pomOrganisation
                        url projectUrl
                    }
                    scm {
                        url scmUrl
                    }
                    licenses {
                        license {
                            name licenseName
                            url "https://github.com/derive4j/derive4j/blob/master/${project.name}/etc/LICENCE.txt"
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            name "Jean-Baptiste Giraudeau"
                            email primaryEmail
                        }
                    }
                }
            }
        }
    }

    uploadArchives {
        enabled = false
        repositories {
            mavenDeployer {
                if (doSigning(signingEnabled, signModule)) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeUploadUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                install.repositories.mavenInstaller.pom
            }
        }
    }
}

ext {
    doSigning = this.&doSigning
    performSigning = this.&performSigning
    configureUpload = this.&configureUpload
}
